# Метрология и качество программного обеспечения информационных систем

## Экзаменационная работа

### *Выполнил:* ст. гр. 3938 Данченко Виктор Вячеславович

> 22.06.2020

**Задание** На спутнике «Восход» установлен прибор, предназначенный для измерения солнечной активности. Каждую минуту прибор передаёт по каналу связи неотрицательное целое число – количество энергии солнечного излучения, полученной за последнюю минуту, измеренное в условных единицах. Временем, в течение которого происходит передача, можно пренебречь. Необходимо найти в заданной серии показаний прибора максимальное чётное произведение двух показаний, между моментами передачи которых прошло не менее 9 минут. Если получить такое произведение не удаётся, ответ считается равным –1. Количество энергии, получаемое прибором за минуту, не превышает 1000 условных единиц. Общее количество показаний прибора в серии не превышает 10 000.
Напишите программу для решения поставленной задачи, которая будет эффективна как по времени, так и по памяти (или хотя бы по одной из этих характеристик).
Входные данные представлены следующим образом. В первой строке задаётся число N – общее количество показаний прибора. Гарантируется, что N > 9. В каждой из следующих N строк задаётся одно положительное целое число – очередное показание прибора.
Рассчитать метрики Холстеда.

**Ключевые слова:** *Javascript, РГУ, МКПО*

**Выполнение:** В качестве программы было разработано консольное приложение на языке программирования Javascript по варианту задания 3.

#### Программный код

```javascript
function taskB(parN) {
    let n = parN,
        min = 1000,
        minp = 1000 * 1000;
    let a = [];

    console.log("n = " + n);

    for (let index = 1; index < 9; index++) {
        a[index] = randomInteger(1, 1000);
    }
    for (let index = 9; index < n; index++) {
        a[index] = randomInteger(1, 1000);
        if ((a[1] % 2 == 1) && (a[1] < min)) {
            min = a[1];
        } else if ((min * a[9] < minp) && (min * a[9] % 2 == 1)) {
            minp = minp * a[9];
        }

        for (let j = 1; j < 6; j++) {
            a[j] = a[j + 1];
        }
    }
    if (minp % 2 == 0) {
        return console.log('-1');
    } else {
        return console.log(minp);
    }
}

function randomInteger(min, max) {
    let rand = min - 0.5 + Math.random() * (max - min + 1);
    return Math.round(rand);
}

function main() {
    taskB(randomInteger(9, 10000));
    return "Вычислено";
}

console.log(main())
```

#### Результат работы программы

![Картинка](https://ibb.co/QDSxP4s "Результат работы программы")

#### Рассчет метрик Холстеда ####

Номер строки | Словарь операторов *n1* | Словарь операндов *n2*    | Общее число операторов *N1*  | Общее число операндов *N2*       |
:----:|--------------------------------|---------------------------|------------------------------|----------------------------------|
1     |function, taskB                 | parN                      | function, taskB              |parN                              |
2     | =                              | n                         | =                            |n, parN                           |
3     |                                | min, 1000                 | =                            |min, 1000                         |
4     |                                | minp                      | =                            | minp, 1000, 1000                 |
5     | []                             | a                         | = , []                       | a                                |
6     | call                           | "n ="                     | call, +                      |"n =", n                          |
7     | for, ;, <, ++                  | index, 9, 1               | for, =, ;, ;, <, ++          |index, 1, 9, n, index, index      |
8     |                                | randomInteger,            | =, [], ;                     | randomInteger, index, a, 1, 1000 |
9     |                                | index, 9, n               | for, =, ;, ;, <, ++          |index, 9, n, index, index         |
10    |                                |                           | =, [], ;                     | randomInteger, index, a, 1, 1000 |
11    | if, ==, %, &&                  | 2                         | if, [], ==, %, &&, <, []     | a, index, 1, 2, min, 1, a        |
12    | =, []                          |                           | =, []                        | min, a, 1                        |
13    | else if, *                     |                           | else if, *, [], <, &&, %, ==, *, []  | min, a, 9, minp, 2, 1, min, 9  |
14    |                                |                           | =, *, []                     | minp, min, a, 9                 |
15    |                                | j, 6                      |for, =, ;, <, ++              | j, 1, 6                         |
16    |                                | a, j, 1                   |[], =, +                      | a, j, 1, j, a                   |
17    |                                | "k="                      | [], =, +                     |"k=", k                          |
18    |                                |                           | if, %, ==                    |  minp, 2, 0                     |
19    | return                         | '-1'                      | return, call                 | '-1'                            |
20    | else                           |                           | else                         |                                 |
21    |                                |                           | return, call                 | minp                            |
23    |                                |                           |function                      |  call, min, max                 |      
24    |                                | rand, 0.5                 |=, -, +, *, call, -, +        |  rand, min, 0.5, max, min       | 
25    |                                |                           |return, call                  |  rand                           | 
26    |                                | main                      |function                      |  main                           | 
27    |                                | 10000                     | call, call                   |  9 , 10000                      | 
28    |                                | "Вычислено"               | return                       |  "Вычислено"                    | 
29    |                                |                           | call, call                   |                                 | 
Кол-во| 20                             | 27                        | 85                           | 79                              |

#### Метрики Холстеда

1. Словарь программы (*Halstead Program Vocabulary*, *HPVoc*): n = n1 + n2 = 20 + 27 = 47;
1. Длина программы (*Halstead Program Length*, *HPLen*): N = N1 + N2 = 85 + 79 = 164;
1. Объем программы (*Halstead Program Volume*, *HPVol*): V = N \* log2(n) = 164 \* 4,54 = 744 (бит);
1. Потенциальный объем программы: V\* = n \* log2(n) = 47 \* 4,54 = 213 (бит);
1. Информационная длина программы: N\* = n1 \* log2(n1) + n2 \* log2(n2) = 20 \* 3,68 + 27 \* 3,98 = 181;
1. Уровень качества программирования L (уровень программы): L = V\* / V = 744 / 213 = 3,49;
1. Сложность программы (*Halstead Difficulty*, *HDiff*): D = 1 / L = 1 / 3,49 = 0,28;
1. Информационное (интеллектуальное) содержание: I = V / D = 744 / 0,28 = 760;
1. Интеллектуальное усилия (*Halstead Effort*, *HEff*): E = V \* D = V / L = 744 / 0,28 = 2565.  
Время на программирование (в условных единицах): T = E / S = 2565 / 5 = 513, где S – число Страуда (5 < S < 20);
1. Уровень языка выражения: lambda  = V / D2^2 = V \* L^2 = 744 \* (0,28)^2 = 58,32;
1. Количество ошибок в программе: В = V / 3000 = 744 / 3000 = 0,248, где V – объем программы.

[Литература](https://ru.wikipedia.org/wiki/Markdown)
